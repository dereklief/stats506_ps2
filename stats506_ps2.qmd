---
title: "STAT 506, PS 2"
format: html
editor: visual
---

GitHub Repository: <https://github.com/dereklief/stats506_ps2>

## **Problem 1 - Dice Game**

Let\'s play a dice game. It costs \$2 to play. You roll a single 6-sided die.

-   On a roll of 2, 4, or 6, you win the amount on the roll (e.g. a roll of 4 wins \$4).

-   On a roll of 1, 3, or 5, you lose.

We\'re going to implement this in different ways. Each function takes in as input the number of dice to roll, and each function returns your total winnings or loses.

a\.

-   Version 1: Implement this game using a loop over the die rolls.

    ```{r}
    #' A function to identify the amount of winnings (or losses) when you play a dice game that costs $2 to play. In this game, you roll a single 6-sided die. On a roll of 2, 4, or 6, you win the amount on the roll (e.g. a roll of 4 wins $4). On a roll of 1, 3, or 5, you lose.
    #' 
    #' @param number_dice_to_roll is the number of dice you roll 
    #' @return your total earnings
    #' @examples 
    #' play_dice(2)
    #' play_dice(10)
    play_dice <- function(number_dice_to_roll){
      total_earnings <- 0
      for(i in 1:number_dice_to_roll){
        roll = sample(1:6, size = 1, replace = TRUE)
        if(roll == 2| roll == 4 | roll == 6){
          winning = roll
          total_earnings = total_earnings + roll
        }else{
          total_earnings = total_earnings - 2
        }
      }
      return(total_earnings)
    }
    ```

-   Version 2: Implement this game using built-in R vectorized functions.

    ```{r}
    #' A function to identify the amount of winnings (or losses) when you play a dice game that costs $2 to play. In this game, you roll a single 6-sided die. On a roll of 2, 4, or 6, you win the amount on the roll (e.g. a roll of 4 wins $4). On a roll of 1, 3, or 5, you lose.
    #' 
    #' @param number_dice_to_roll_2 is the number of dice you roll 
    #' @return your total earnings
    #' @examples 
    #' play_dice_2(2)
    #' play_dice_2(10)
    play_dice_2 <- function(number_dice_to_roll_2){
      sample_2 <- sample(x = 1:6, size = number_dice_to_roll_2, replace = TRUE)
      total_earnings_2 <- sum(sample_2[sample_2 %% 2 == 0]) - (2*(length(sample_2[sample_2 %% 2 != 0])))
      return(total_earnings_2)
    }
    ```

-   Version 3: Implement this by collapsing the die rolls into a single `table()`. (Hint: Be careful indexing the table - what happens if you make a table of 5 dice rolls? You may need to look to other resources for how to solve this.)

```{r}
#' A function to identify the amount of winnings (or losses) when you play a dice game that costs $2 to play. In this game, you roll a single 6-sided die. On a roll of 2, 4, or 6, you win the amount on the roll (e.g. a roll of 4 wins $4). On a roll of 1, 3, or 5, you lose.
#' 
#' @param number_dice_to_roll_3 is the number of dice you roll 
#' @return your total earnings
#' @examples 
#' play_dice_3(2)
#' play_dice_3(10)
play_dice_3 <- function(number_dice_to_roll_3){
  sample_3 <- sample(x = 1:6, size = number_dice_to_roll_3, replace = TRUE)
  sample_3_table <- table(sample_3)
  library(data.table)
  sample_3_df <- data.table(sample_3_table)
  sample_3_df$sample_3 <- as.numeric(sample_3_df$sample_3)
  sample_3_df$type <- ifelse(sample_3_df$sample_3 %% 2 == 0, "even", "odd")
  sample_3_df$earning <- ifelse(sample_3_df$type == "even", sample_3_df$sample_3 * sample_3_df$N, sample_3_df$N * -2)
  return((sum(sample_3_df$earning)))
}
```

-   Version 4: Implement this game by using one of the \"`apply`\" functions.

```{r}
#' A function to identify the amount of winnings (or losses) when you play a dice game that costs $2 to play. In this game, you roll a single 6-sided die. On a roll of 2, 4, or 6, you win the amount on the roll (e.g. a roll of 4 wins $4). On a roll of 1, 3, or 5, you lose.
#' 
#' @param number_dice_to_roll_4 is the number of dice you roll 
#' @return your total earnings
#' @examples 
#' play_dice_4(2)
#' play_dice_4(10)
play_dice_4 <- function(number_dice_to_roll_4){
  sample_4 <- sample(x = 1:6, size = number_dice_to_roll_4, replace = TRUE)
  evens <- sample_4[lapply(sample_4, '%%', 2) == 0] # Q1: why do I need to separate the modulus and the 2 like this?; COMMENT: https://stackoverflow.com/questions/61484767/function-for-selecting-even-numbers-in-a-vector-in-r helped me
  odds <- sample_4[lapply(sample_4, '%%', 2) != 0]
  total_earnings <- (sum(evens)) -  ((2)*(length(odds)))
  return(total_earnings)
}
```

b.  Demonstrate that all versions work. Do so by running each a few times, once with an input a 3, and once with an input of 3000.

    ```{r}
    play_dice(3)
    play_dice(3000)
    ```

    ```{r}
    play_dice_2(3)
    play_dice_2(3000)
    ```

    ```{r}
    play_dice_3(3)
    play_dice_3(3000)
    ```

    ```{r}
    play_dice_4(3)
    play_dice_4(3000)
    ```

c.  Demonstrate that the four versions give the same result. Test with inputs 3 and 3000. (You may need to add a way to control the randomization.)

    ```{r}
    #' A function to identify the amount of winnings (or losses) when you play a dice game that costs $2 to play. In this game, you roll a single 6-sided die. On a roll of 2, 4, or 6, you win the amount on the roll (e.g. a roll of 4 wins $4). On a roll of 1, 3, or 5, you lose. I note that the seed has been set at 5 for the sample generator in this function to ensure that we can check the results across multiple functions.
    #' 
    #' @param number_dice_to_roll is the number of dice you roll 
    #' @return your total earnings
    #' @examples 
    #' play_dice(2)
    #' play_dice(10)
    play_dice <- function(number_dice_to_roll){
      total_earnings <- 0
      set.seed(5)
      for(i in 1:number_dice_to_roll){
        roll = sample(1:6, size = 1, replace = TRUE)
        if(roll == 2| roll == 4 | roll == 6){
          winning = roll
          total_earnings = total_earnings + roll
        }else{
          total_earnings = total_earnings - 2
        }
      }
      return(total_earnings)
    }

    #' A function to identify the amount of winnings (or losses) when you play a dice game that costs $2 to play. In this game, you roll a single 6-sided die. On a roll of 2, 4, or 6, you win the amount on the roll (e.g. a roll of 4 wins $4). On a roll of 1, 3, or 5, you lose. I note that the seed has been set at 5 for the sample generator in this function to ensure that we can check the results across multiple functions.
    #' 
    #' @param number_dice_to_roll_2 is the number of dice you roll 
    #' @return your total earnings
    #' @examples 
    #' play_dice_2(2)
    #' play_dice_2(10)
    play_dice_2 <- function(number_dice_to_roll_2){
      set.seed(5)
      sample_2 <- sample(x = 1:6, size = number_dice_to_roll_2, replace = TRUE)
      total_earnings_2 <- sum(sample_2[sample_2 %% 2 == 0]) - (2*(length(sample_2[sample_2 %% 2 != 0])))
      return(total_earnings_2)
    }

    #' A function to identify the amount of winnings (or losses) when you play a dice game that costs $2 to play. In this game, you roll a single 6-sided die. On a roll of 2, 4, or 6, you win the amount on the roll (e.g. a roll of 4 wins $4). On a roll of 1, 3, or 5, you lose. I note that the seed has been set at 5 for the sample generator in this function to ensure that we can check the results across multiple functions.
    #' 
    #' @param number_dice_to_roll_3 is the number of dice you roll 
    #' @return your total earnings
    #' @examples 
    #' play_dice_3(2)
    #' play_dice_3(10)
    play_dice_3 <- function(number_dice_to_roll_3){
      set.seed(5)
      sample_3 <- sample(x = 1:6, size = number_dice_to_roll_3, replace = TRUE)
      sample_3_table <- table(sample_3)
      library(data.table)
      sample_3_df <- data.table(sample_3_table)
      sample_3_df$sample_3 <- as.numeric(sample_3_df$sample_3)
      sample_3_df$type <- ifelse(sample_3_df$sample_3 %% 2 == 0, "even", "odd")
      sample_3_df$earning <- ifelse(sample_3_df$type == "even", sample_3_df$sample_3 * sample_3_df$N, sample_3_df$N * -2)
      return((sum(sample_3_df$earning)))
    }

    #' A function to identify the amount of winnings (or losses) when you play a dice game that costs $2 to play. In this game, you roll a single 6-sided die. On a roll of 2, 4, or 6, you win the amount on the roll (e.g. a roll of 4 wins $4). On a roll of 1, 3, or 5, you lose. I note that the seed has been set at 5 for the sample generator in this function to ensure that we can check the results across multiple functions.
    #' 
    #' @param number_dice_to_roll_4 is the number of dice you roll 
    #' @return your total earnings
    #' @examples 
    #' play_dice_4(2)
    #' play_dice_4(10)
    play_dice_4 <- function(number_dice_to_roll_4){
      set.seed(5)
      sample_4 <- sample(x = 1:6, size = number_dice_to_roll_4, replace = TRUE)
      evens <- sample_4[lapply(sample_4, '%%', 2) == 0] # Q1: why do I need to separate the modulus and the 2 like this?; COMMENT: https://stackoverflow.com/questions/61484767/function-for-selecting-even-numbers-in-a-vector-in-r helped me
      odds <- sample_4[lapply(sample_4, '%%', 2) != 0]
      total_earnings <- (sum(evens)) -  ((2)*(length(odds)))
      return(total_earnings)
    }
    ```

    ```{r}
    play_dice(3)
    play_dice(3000)

    play_dice_2(3)
    play_dice_2(3000)

    play_dice_3(3)
    play_dice_3(3000)

    play_dice_4(3)
    play_dice_4(3000)
    ```

d.   Use the *microbenchmark* package to clearly demonstrate the speed of the implementations. Compare performance with a low input (100) and a large input (10000). Discuss the results

    ```{r}
    library(microbenchmark)
    microbenchmark(play_dice(100), play_dice_2(100), play_dice_3(100), play_dice_4(100))

    ```

    According to Hadley Wickham, when looking at the measurement of performance as provided by `microbenchmark`, we should focus on the median and use the upper and lower quartiles to get a feel for the variability. Looking at the median, we see that the function I wrote that involves the table is the slowest. That is probably because I converted my table to a dataframe to do the final sum. Next is the for loop, which given our discussion in class, I would definitely expect to be the slowest. Again, I think that the table function turned out to be slowest because of my use of the dataframe. Next, we have the `apply` function (and specifically `lapply`). As noted in the lecture notes, `lapply` actually drops down to C for its loops, and at each step in the C loop, it evaluates the R function passed in. This is what makes it not vectorized, as a true vectorized function performs its loop in C \emph{and} uses C compiled functions inside that loop. With that explanation in mind, it is not surprising that my version of the function that uses `lapply` is slower than the vectorized version. Finally, the vectorized version (`play_dice_2`) is the fastest. I note that this explanation was for the case with the low input (100). Let's see what happens when we use the large input (10000).

    ```{r}
    microbenchmark(play_dice(10000), play_dice_2(10000), play_dice_3(10000), play_dice_4(10000))
    ```

    I noticed a few things here. First, it took a significantly longer time to get through the functions. That just emphasizes that these nanoseconds add up when the numbers get larger. Second, the loop function (`play_dice`) is SO much slower than every other function - even the next slowest (`play_dice_4`), it is slower by about 10 orders of magnitude. Wow. It is interesting that the `lapply` function (`play_dice_4`) took a big hit on speed when we ramped the numbers up. This is clearly the effect of the underlying loops being run over and over again with this function. The table function (`play_dice_3`) had significant gains this time. This suggests to me that while it was slow to set up the dataframe, once it was there, it was faster than going through with something like a loop. Lastly, (and still), the vectorized option is still the fastest.

e.  Do you think this is a fair game? Defend your decision with evidence based upon a Monte Carlo simulation.

    I note that if the dice is fair, the probability of any one digit appearing on a single roll is $1/6$ and the probability of that digit \emph{not} appearing is $1 - 1/6 = 5/6$. Because we are assuming that these rolls are independent (i.e. with replacement), any one of the numbers should not appear more than $5/6^n$ where $n$ is the number of rolls. To test whether the die is "fair" we can compare this theoretical result to the actual result above where I `set.seed(5)` and `sample(x = 1:6, size = number_dice_to_roll, replace = TRUE)`. I note that I used this site to help me with this answer: https://stackoverflow.com/questions/41685557/estimate-the-chance-n-rolls-of-m-fair-six-sided-dice.

    ```{r}
    fair_dice <- function(number_of_rolls){
      set.seed(5)
      x <- replicate(number_of_rolls, 1 %in% sample(x = 1:6, size = 1, replace = TRUE))
      
      # Compare to a theoretical result.
      theory <- 1-(5/6)^(number_of_rolls)
      avg <- mean(x)
      Z <- (avg - theory) / sd(x) * sqrt(length(x))
      p_value <- pnorm(Z, avg, sd(x))
      return(cat("Z-score:", Z, "\n p-value:", p_value))
    }
    fair_dice(10)
    fair_dice(100)
    ```

This result suggests to us that the die is indeed fair, with such a low p-value both with a low number of rolls at $10$ and a p-value of $1.196483 \cdot 10^{-15}$ and with a higher number of rolls at $100$ with a p-value that is effectively $0$.

## Problem 2 - Linear Regression

Download the cars data set available at <https://corgis-edu.github.io/corgis/csv/cars/>. The goal is to examine the relationship between horsepower and highway gas mileage.

a\. The names of the variables in this data are way too long. Rename the columns of the data to more reasonable lengths.

```{r}
library(readr)
library(dplyr)
cars <- read.csv('/Users/dereklief/Desktop/MAIN FOLDER/Classes and Other/STATS 506/PS 2/stats506_ps2/cars.csv')

cars <- cars %>% #Q2 for Josh: is there a faster/better way to do this?
       rename(height = 1, 
              length = 2,
              width = 3,
              driveline = 4,
              engine_type = 5,
              hybrid = 6,
              no_fwd_gears = 7,
              transmission = 8,
              city_mpg = 9,
              fuel_type = 10,
              highway_mpg = 11,
              classification = 12,
              id = 13,
              make = 14,
              model_year = 15,
              year = 16,
              horsepower = 17,
              torque = 18)
```

b\. Restrict the data to cars whose Fuel Type is \"Gasoline\".

```{r}
gas_cars <- cars[cars$fuel_type == "Gasoline", ]
table(gas_cars$fuel_type)
```

c\. Fit a linear regression model predicting MPG on the highway. The predictor of interest is horsepower. Control for:

-   The torque of the engine

-   All three dimensions of the car

-   The year the measurement was made, as a categorical variable. (Not the year the car was manufactured.)

Briefly discuss the estimated relationship between horsepower and highway MPG. Be precise about the interpretation of the estimated coefficient.

```{r}
gas_cars$year <- as.factor(gas_cars$year)
m1 <- lm(highway_mpg ~ horsepower + torque + height + length + width + year, data = gas_cars)
summary(m1)
```

The summary statistics from our model, `m1` above show that there is a positive, statistically significant association between `horsepower` and `MPG` controlling for `torque`, `height`, `length`, `width` and `year`. I note that some may interpret these results as "for every 1 unit increase in horsepower, there is a 0.016 unit increase in highway MPG, and that the relationship is statistically significant at the 0.01 level." This claim, in quotations, however, implies causality, which is not something we can determine from `m1`. The best we can do is correlation, which is why I used the word "association" in the beginning.

d\. It seems reasonable that there may be an interaction between horsepower and torque. Refit the model (with `lm`) and generate an interaction plot, showing how the relationship between horsepower and MPG changes as torque changes. Choose reasonable values of horsepower, and show lines for three different reasonable values of torque.

We know that torque and horsepower are continuous variables. To find a reasonable range for horsepower, and a reasonable way to segment torque into three lines, let's look at summaries of their values:

```{r}
summary(gas_cars$horsepower)
summary(gas_cars$torque)
summary(gas_cars$year)
```

OK, so for horsepower, we can set our x-axis to values between $100$ and \$638\$, and for torque, it makes sense to set "low", "medium" and "high" (0, 1, 2) for values between \$98 - 176.99999\$, $177 - 331.999999$ and $332 - 774$, respectively.

```{r}
gas_cars$torque_level <- ifelse(gas_cars$torque < 177, "low",
                          ifelse(gas_cars$torque >= 177 & gas_cars$torque < 332, "medium", "high")) 
gas_cars$torque_level <- factor(gas_cars$torque_level, level = c("low", "medium", "high"))
head(gas_cars$torque_level)
```

Now, let's run our model:

```{r}
library(emmeans)
library(interactions)
m2 <- lm(highway_mpg ~ (horsepower*torque_level) + height + length + width + as.factor(year), data = gas_cars)
summary(m2)
```

Now we want to produce an interaction plot, but the hint tells us to simplify the problem by choosing just one year. Let's see how many observations are in each year to choose a reasonable year:

```{r}
table(gas_cars$year)
```

We could reasonable choose any of the years from \$2010 - 2012\$, but since $2011$ has the most observations, let's choose that year:

```{r}
gas_cars_2011 <- gas_cars[ which(gas_cars$year==2011), ]
m3 <- lm(highway_mpg ~ (horsepower*torque_level) + height + length + width, data = gas_cars_2011)
summary(m3)
```

```{r}
emmip(m3, as.factor(torque_level) ~ horsepower, at = list(horsepower = 100:638)) 
# Q3: how to change order of torque level?
```

Just for fun, I want to try this with `interact_plot` too:

```{r}
interact_plot(m3, pred = horsepower, modx = torque_level)
```

e\. Calculate $\hat{\beta}$ manually (without using `lm`) by first creating a proper design matrix, then using matrix algebra to estimate $\beta$. Confirm that you get the same result as `lm` did prior.

Let's try and do this for each of our three models above, starting with `m1`. I note that I am going to be very deliberate here so everything is clear:

```{r}
X <- model.matrix(m1, data = gas_cars) # step 1: define our design matrix, X
X_trans <- t(X) # step 2: based on our design matrix, define X^t
X_2 <- X_trans %*% X # step 3: multiply X^t by our design matrix
X_inv <- solve(X_2) # step 4: take the inverse of X^t and X
y <- gas_cars$highway_mpg #step 5: define y

beta_hat <- (X_inv %*% X_trans) %*% y # step 6: calculate beta hat, which will be a vector of our coefficients (and intercept)
beta_hat
```

If we look back up to $2c$, we see that the intercept and coefficients that we get here are identical to what we got in that problem. Now let's do the same for `m2`:

```{r}
X_m2 <- model.matrix(m2, data = gas_cars) # step 1: define our design matrix, X
X_m2_trans <- t(X_m2) # step 2: based on our design matrix, define X^t
X_m2_2 <- X_m2_trans %*% X_m2 # step 3: multiply X^t by our design matrix
X_m2_inv <- solve(X_m2_2) # step 4: take the inverse of X^t and X

beta_hat_m2 <- (X_m2_inv %*% X_m2_trans) %*% y # step 6: calculate beta hat, which will be a vector of our coefficients (and intercept)
beta_hat_m2
```

If we look back up to $2d$, we see that the intercept and coefficients that we get here are identical to what we got in that problem (for `m2`). Now let's do the same for `m3`:

```{r}
X_m3 <- model.matrix(m3, data = gas_cars_2011) # step 1: define our design matrix, X
X_m3_trans <- t(X_m3) # step 2: based on our design matrix, define X^t
X_m3_2 <- X_m3_trans %*% X_m3 # step 3: multiply X^t by our design matrix
X_m3_inv <- solve(X_m3_2) # step 4: take the inverse of X^t and X
y_m3 <- gas_cars_2011$highway_mpg # step 5: define y

beta_hat_m3 <- (X_m3_inv %*% X_m3_trans) %*% y_m3 # step 6: calculate beta hat, which will be a vector of our coefficients (and intercept)
beta_hat_m3
```

We see again that we get the same result as we did in `m3` in $2d$.

## Problem 3 - Stata

Repeat problem 2 parts a. through d. in Stata.

**Important**: Repeating part e. (manually estimating β^) in Stata is optional . You can choose to repeat e. for minor extra credit.

Note: Quarto and Stata don\'t play together well, especially if you\'re working on Stata remotely. For this problem, and this problem only, you can write a .Do file to answer this question, then include its input and output directly into your submission, by copying the Stata output window and including a non-evaluated chunk

a\. The names of the variables in this data are way too long. Rename the columns of the data to more reasonable lengths.

First, the do-file input:

``` stata
**part a
* load cars dataset
import delimited "C:\Users\dlief\Desktop\cars (1).csv"

rename dimensionsheight height
 rename dimensionslength length
 rename dimensionswidth width
 rename engineinformationdriveline driveline
 rename engineinformationenginetype engine_type
 rename engineinformationhybrid hybrid
 rename engineinformationnumberofforward no_fwd_gears
 rename engineinformationtransmission transmission
 rename fuelinformationcitympg citympg
 rename fuelinformationfueltype fuel_type
 rename fuelinformationhighwaympg highway_mpg
 rename identificationclassification classification
 rename identificationid id
 rename identificationmake make
 rename identificationmodelyear model_year
 rename identificationyear year
 rename engineinformationenginestatistic horsepower
 rename v18 torque
```

Second, the output:

``` stata
. do "C:\Users\LOCAL_~1\Temp\STD44b0_000000.tmp"

. **part a
. * load cars dataset
. import delimited "C:\Users\dlief\Desktop\cars (1).csv"
(encoding automatically selected: ISO-8859-1)
(18 vars, 5,076 obs)

. 
. rename dimensionsheight height

.  rename dimensionslength length

.  rename dimensionswidth width

.  rename engineinformationdriveline driveline

.  rename engineinformationenginetype engine_type

.  rename engineinformationhybrid hybrid

.  rename engineinformationnumberofforward no_fwd_gears

.  rename engineinformationtransmission transmission

.  rename fuelinformationcitympg citympg

.  rename fuelinformationfueltype fuel_type

.  rename fuelinformationhighwaympg highway_mpg

.  rename identificationclassification classification

.  rename identificationid id

.  rename identificationmake make

.  rename identificationmodelyear model_year

.  rename identificationyear year

.  rename engineinformationenginestatistic horsepower

.  rename v18 torque
```

b\. Restrict the data to cars whose Fuel Type is \"Gasoline\".

First, the do-file input:

``` stata
 tabulate fuel_type
 keep if fuel_type=="Gasoline"
 tabulate fuel_typ
```

Second, the output:

``` stata
.  **part b
.  tabulate fuel_type

 Fuel Information.Fuel |
                  Type |      Freq.     Percent        Cum.
-----------------------+-----------------------------------
Compressed natural gas |          2        0.04        0.04
           Diesel fuel |         27        0.53        0.57
                   E85 |        456        8.98        9.55
              Gasoline |      4,591       90.45      100.00
-----------------------+-----------------------------------
                 Total |      5,076      100.00

.  keep if fuel_type=="Gasoline"
(485 observations deleted)

.  tabulate fuel_type

 Fuel Information.Fuel |
                  Type |      Freq.     Percent        Cum.
-----------------------+-----------------------------------
              Gasoline |      4,591      100.00      100.00
-----------------------+-----------------------------------
                 Total |      4,591      100.00
```

c\. Fit a linear regression model predicting MPG on the highway. The predictor of interest is horsepower. Control for:

-   The torque of the engine

-   All three dimensions of the car

-   The year the measurement was made, as a categorical variable. (Not the year the car was manufactured.)

Briefly discuss the estimated relationship between horsepower and highway MPG. Be precise about the interpretation of the estimated coefficient.

First, the do-file input:

``` stata
  **part c
 generate byte cat_year = 0 if year==2009
 replace cat_year = 1 if year == 2010
 replace cat_year = 2 if year == 2011
 replace cat_year = 3 if year == 2012
regress highway_mpg horsepower height length width torque cat_year
```

Second, the output:

``` stata
.   **part c
.  generate byte cat_year = 0 if year==2009
(4,543 missing values generated)

.  replace cat_year = 1 if year == 2010
(1,633 real changes made)

.  replace cat_year = 2 if year == 2011
(1,794 real changes made)

.  replace cat_year = 3 if year == 2012
(1,116 real changes made)

. regress highway_mpg horsepower height length width torque i.cat_year

      Source |       SS           df       MS      Number of obs   =     4,591
-------------+----------------------------------   F(8, 4582)      =    413.35
       Model |  70043.6695         8  8755.45869   Prob > F        =    0.0000
    Residual |   97055.298     4,582  21.1818634   R-squared       =    0.4192
-------------+----------------------------------   Adj R-squared   =    0.4182
       Total |  167098.968     4,590  36.4050038   Root MSE        =    4.6024
------------------------------------------------------------------------------
 highway_mpg | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]
-------------+----------------------------------------------------------------
  horsepower |   .0163556   .0022772     7.18   0.000     .0118913      .02082
      height |   .0099079   .0011267     8.79   0.000      .007699    .0121168
      length |    .001729   .0008836     1.96   0.050    -3.36e-06    .0034613
       width |  -.0003343   .0009045    -0.37   0.712    -.0021075    .0014388
      torque |  -.0507425    .002203   -23.03   0.000    -.0550614   -.0464236
             |
    cat_year |
          1  |  -.4539681   .6768246    -0.67   0.502     -1.78087    .8729342
          2  |   .1711016   .6757043     0.25   0.800    -1.153604    1.495808
          3  |   1.302928   .6810076     1.91   0.056    -.0321751    2.638031
             |
       _cons |   32.29266   .7225982    44.69   0.000     30.87602     33.7093
------------------------------------------------------------------------------
```

Our ouput is identical to that what R produced above (just note that here, the year $2009$ is coded as "0", $2010$ as "1", $2011$ as "2" and $2012$ as "3". Just as a reminder, from above I said (which is the same interpretation here):

The summary statistics from our model above show that there is a positive, statistically significant association between `horsepower` and `MPG` controlling for `torque`, `height`, `length`, `width` and `year`. I note that some may interpret these results as "for every 1 unit increase in horsepower, there is a 0.016 unit increase in highway MPG, and that the relationship is statistically significant at the 0.01 level." This claim, in quotations, however, implies causality, which is not something we can determine from the model. The best we can do is correlation, which is why I used the word "association" in the beginning.

d\. It seems reasonable that there may be an interaction between horsepower and torque. Refit the model (with `lm`) and generate an interaction plot, showing how the relationship between horsepower and MPG changes as torque changes. Choose reasonable values of horsepower, and show lines for three different reasonable values of torque.

First, let's split torque into our three levels and run the model (model 2 in problem 2d above. The do-file input:

``` stata
 **part d 
 generate byte cat_torque = 0 if torque < 177
 replace cat_torque = 1 if (torque >= 177 & torque < 332)
 replace cat_torque = 2 if torque >= 332
 recast float horsepower
 regress highway_mpg i.cat_torque##c.horsepower height length width i.cat_year
```

And the output:

``` stata
 **part d 
.  generate byte cat_torque = 0 if torque < 177
(3,505 missing values generated)

.  replace cat_torque = 1 if (torque >= 177 & torque < 332)
(2,356 real changes made)

.  replace cat_torque = 2 if torque >= 332
(1,149 real changes made)

.  recast float horsepower

.  regress highway_mpg i.cat_torque##c.horsepower height length width i.cat_year

      Source |       SS           df       MS      Number of obs   =     4,591
-------------+----------------------------------   F(11, 4579)     =    337.89
       Model |  74865.9527        11   6805.9957   Prob > F        =    0.0000
    Residual |  92233.0149     4,579  20.1426108   R-squared       =    0.4480
-------------+----------------------------------   Adj R-squared   =    0.4467
       Total |  167098.968     4,590  36.4050038   Root MSE        =    4.4881

------------------------------------------------------------------------------
 highway_mpg | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]
-------------+----------------------------------------------------------------
  cat_torque |
          1  |   -14.6112   1.028341   -14.21   0.000    -16.62725   -12.59516
          2  |  -23.17137   1.130887   -20.49   0.000    -25.38845   -20.95428
             |
  horsepower |  -.0843874   .0056273   -15.00   0.000    -.0954196   -.0733552
             |
  cat_torque#|
c.horsepower |
          1  |   .0648037   .0059242    10.94   0.000     .0531893    .0764181
          2  |   .0836123   .0058457    14.30   0.000     .0721519    .0950726
             |
      height |   .0064833   .0011187     5.80   0.000       .00429    .0086765
      length |   .0006472   .0008626     0.75   0.453     -.001044    .0023384
       width |  -.0048559   .0009119    -5.33   0.000    -.0066436   -.0030682
             |
    cat_year |
          1  |  -.9267863   .6604044    -1.40   0.161    -2.221497    .3679247
          2  |   -.261672   .6593885    -0.40   0.692    -1.554391    1.031047
          3  |    1.06691   .6645702     1.61   0.108    -.2359676    2.369788
             |
       _cons |   43.86863   1.169264    37.52   0.000     41.57631    46.16096
------------------------------------------------------------------------------
```

We see that this matches our r output. Now, let's simulate model 3 from the same problem above (i.e. just the year $2011$). The do-file input:

``` stata
 keep if year==2011
 regress highway_mpg i.cat_torque##c.horsepower height length width
```

And the output:

``` stata
 regress highway_mpg i.cat_torque##c.horsepower height length width

      Source |       SS           df       MS      Number of obs   =     1,794
-------------+----------------------------------   F(8, 1785)      =     94.16
       Model |  26152.6133         8  3269.07666   Prob > F        =    0.0000
    Residual |  61972.3945     1,785  34.7184283   R-squared       =    0.2968
-------------+----------------------------------   Adj R-squared   =    0.2936
       Total |  88125.0078     1,793  49.1494745   Root MSE        =    5.8922

------------------------------------------------------------------------------
 highway_mpg | Coefficient  Std. err.      t    P>|t|     [95% conf. interval]
-------------+----------------------------------------------------------------
  cat_torque |
          1  |  -15.72572   2.135139    -7.37   0.000    -19.91335   -11.53808
          2  |  -21.09396   2.351654    -8.97   0.000    -25.70624   -16.48167
             |
  horsepower |  -.0854907    .011607    -7.37   0.000    -.1082555   -.0627259
             |
  cat_torque#|
c.horsepower |
          1  |   .0704096   .0122484     5.75   0.000     .0463868    .0944323
          2  |   .0804768   .0120746     6.66   0.000     .0567949    .1041587
             |
      height |   .0056082   .0023354     2.40   0.016     .0010279    .0101885
      length |   .0023856   .0018118     1.32   0.188    -.0011679    .0059391
       width |  -.0064036   .0019635    -3.26   0.001    -.0102547   -.0025525
       _cons |   43.62117   2.023491    21.56   0.000     39.65251    47.58983
------------------------------------------------------------------------------
```

Again, the output matches that from r.

Finally, let's make our interactions plot. The do-file:

``` stata
 margins, at(horsepower =(100 200 300 400 500 600)) over(cat_torque)
 marginsplot, title("Interaction Plot: Horsepower on MPG over Torque (2011)") xtitle("Horsepower") legend(order(1 "Low" 2 "Medium" 3 "High")) noci
```

And the output:

![](images/graphps3.png)

And we see that this is exactly the graph we had in r too.
